import streamlit as st
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import plotly.express as px
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Fun√ß√£o de tratamento de exce√ß√µes ao carregar dados
def safe_load_data(url):
    try:
        tables = pd.read_html(url)
        return pd.DataFrame(tables[2]).drop(0)
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return None

# CSS personalizado para bot√µes, r√≥tulos e elementos
st.markdown("""
    <style>
        .st-info-box {
            background-color: #1e1e1e;
            padding: 15px;
            border-radius: 8px;
            color: white;
            border-left: 5px solid #FF0055;
            font-size: 16px;
        }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo do aplicativo
#st.title("An√°lise da Varia√ß√£o Relativa das Vari√°veis Econ√¥micas")
# Caixa de informa√ß√µes
st.markdown("""
### Explorando a Volatilidade do Pre√ßo do Petr√≥leo
<div class="st-info-box">
O mercado de petr√≥leo √© influenciado por fatores econ√¥micos, geopol√≠ticos e de oferta e demanda global. Este dashboard oferece uma vis√£o hol√≠stica da varia√ß√£o do pre√ßo do petr√≥leo Brent e suas rela√ß√µes com outras vari√°veis econ√¥micas.
</div>
<br/>
""", unsafe_allow_html=True)

# Importar os dados do petr√≥leo
df = safe_load_data("http://www.ipeadata.gov.br/ExibeSerie.aspx?module=m&serid=1650971490&oper=view")
if df is not None:
    df.columns = ['Data', 'Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares']
    df['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares'] = df['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares'].apply(lambda x: float(x[:-2] + '.' + x[-2:]))
    df.rename(columns={'Data': 'Date'}, inplace=True)
    df['Date'] = pd.to_datetime(df['Date']).dt.tz_localize(None)

    # Filtrar dados a partir de 2006
    data_corte_min = pd.to_datetime('2006-01-01')
    base = df[df['Date'] >= data_corte_min]

    # Obter dados adicionais
    def get_yahoo_data(ticker):
        try:
            data = yf.Ticker(ticker).history(period="max", interval="1d").reset_index()
            data['Date'] = data['Date'].dt.tz_localize(None)
            return data[['Date', 'Close']]
        except Exception as e:
            st.error(f"Erro ao carregar dados de {ticker}: {e}")
            return None

    s500 = get_yahoo_data("^GSPC").rename(columns={'Close': 'S&P500'})
    gold_history = get_yahoo_data("IAU").rename(columns={'Close': 'Gold'})
    dxy_history = get_yahoo_data("DX-Y.NYB").rename(columns={'Close': '√çndice DXY'})

    # Mesclar dados
    base = base.merge(s500, on='Date', how='left').merge(gold_history, on='Date', how='left').merge(dxy_history, on='Date', how='left').fillna(method='ffill')

    # Normalizar os dados
    cols_to_normalize = ['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares', 'S&P500', 'Gold', '√çndice DXY']
    base[cols_to_normalize] = base[cols_to_normalize].apply(lambda x: x / x.iloc[0])

    # Menu de filtros
    st.sidebar.header("Filtros")
    tickers_selecionados = st.sidebar.multiselect(
        "Selecione as vari√°veis que deseja visualizar",
        options=cols_to_normalize,
        default=cols_to_normalize
    )

    min_date, max_date = base['Date'].min().date(), base['Date'].max().date()
    start_date, end_date = st.sidebar.slider("Selecione o per√≠odo:", min_value=min_date, max_value=max_date, value=(min_date, max_date), format="YYYY-MM-DD")
    df_filtered = base[(base['Date'] >= pd.Timestamp(start_date)) & (base['Date'] <= pd.Timestamp(end_date))]

# Fun√ß√µes para cada aba
def Estatistica_descritiva():
    # Estat√≠sticas descritivas melhoradas
    st.markdown("##### Estat√≠sticas Descritivas - Pre√ßo do Petr√≥leo Brent")
    
    desc_stats = base[['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares']].describe()

    # Destacando estat√≠sticas importantes em cart√µes visuais
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric(label="üìä M√©dia do Pre√ßo", value=f"{desc_stats.loc['mean'][0]:.2f} USD")
    with col2:
        st.metric(label="üî∫ Pre√ßo M√°ximo", value=f"{desc_stats.loc['max'][0]:.2f} USD")
    with col3:
        st.metric(label="üîª Pre√ßo M√≠nimo", value=f"{desc_stats.loc['min'][0]:.2f} USD")
    with col4:
        st.metric(label="üìâ Volatilidade (Desvio Padr√£o)", value=f"{desc_stats.loc['std'][0]:.2f} USD")

    # Insights explicativos
    st.markdown("""
    ---
    ##### üîç Principais Insights
    - **M√©dia:** O pre√ßo m√©dio do petr√≥leo Brent foi de **{:.2f}** d√≥lares, indicando relativa estabilidade em per√≠odos n√£o influenciados por choques econ√¥micos.
    - **M√°ximo:** O pico de **{:.2f}** d√≥lares est√° associado a choques externos, como crises de oferta de energia.
    - **M√≠nimo:** O pre√ßo m√≠nimo de **{:.2f}** d√≥lares pode ter ocorrido durante per√≠odos de recess√£o global.
    - **Desvio Padr√£o:** Com **{:.2f}** d√≥lares, a volatilidade sugere grandes oscila√ß√µes, possivelmente causadas por crises geopol√≠ticas.
    ---
    """.format(desc_stats.loc['mean'][0], desc_stats.loc['max'][0], desc_stats.loc['min'][0], desc_stats.loc['std'][0]))

    # Gr√°fico de distribui√ß√£o do pre√ßo do petr√≥leo
    st.markdown("""##### üìà Distribui√ß√£o do Pre√ßo do Petr√≥leo Brent
O histograma abaixo mostra a distribui√ß√£o dos pre√ßos normalizados do petr√≥leo Brent ao longo do tempo.
    """)
    fig, ax = plt.subplots(figsize=(8, 5))
    sns.histplot(base['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares'], bins=30, kde=True, ax=ax)
    ax.set_title("Distribui√ß√£o do Pre√ßo do Petr√≥leo Brent")
    st.pyplot(fig)
    st.markdown("""
- **Distribui√ß√£o assim√©trica levemente positiva:** A maior concentra√ß√£o dos pre√ßos est√° entre **0.75** e **1.25** d√≥lares normalizados, indicando um per√≠odo predominante de estabilidade.
- **Picos distintos:** O segundo pico pr√≥ximo de **1.50** d√≥lares sugere um momento de aumento acentuado dos pre√ßos, possivelmente associado a eventos econ√¥micos espec√≠ficos, como a crise financeira de 2008 ou o conflito R√∫ssia-Ucr√¢nia.
- **Cauda longa:** A presen√ßa de uma cauda √† direita evidencia epis√≥dios de pre√ßos elevados, caracter√≠sticos de choques de oferta ou alta demanda no mercado energ√©tico global.
    """)
    



def Grafico_Var_Event_Hist():
    # Verifique se h√° pelo menos uma vari√°vel selecionada
     if not tickers_selecionados:
        st.warning("Por favor, selecione pelo menos uma vari√°vel para visualizar o gr√°fico.")
     else:
        # Gr√°fico interativo com anota√ß√µes de eventos hist√≥ricos
        st.markdown("""
### üìà Gr√°fico de Varia√ß√£o Relativa com Eventos Hist√≥ricos
Gr√°fico interativo mostrando a evolu√ß√£o do pre√ßo do petr√≥leo Brent e de vari√°veis econ√¥micas. As s√©ries normalizadas permitem comparar diferentes tend√™ncias, identificar converg√™ncias e momentos de ruptura ao longo do tempo.
""")         

        st.markdown("""
---
##### üõ†Ô∏è Como utilizar este gr√°fico:
1. No painel lateral, voc√™ pode escolher as vari√°veis que deseja visualizar.
2. Use o controle deslizante para ajustar o per√≠odo de interesse. Voc√™ pode se concentrar em momentos espec√≠ficos, como crises econ√¥micas ou per√≠odos de estabilidade.
3. Linhas verticais vermelhas indicam eventos significativos.
---
        """)
        fig = px.line(df_filtered, x='Date', y=tickers_selecionados, title="Varia√ß√£o Relativa das Vari√°veis ao Longo do Tempo")

        # Eventos hist√≥ricos
        eventos = {
            '2008-07-01': 'Crise Financeira Global',
            '2020-03-01': 'In√≠cio da Pandemia COVID-19',
            '2022-02-24': 'Conflito R√∫ssia-Ucr√¢nia'
        }

        for date, event in eventos.items():
            fig.add_vline(x=date, line_width=2, line_dash="dash", line_color="red")
            fig.add_annotation(x=date, y=1.05, text=event, showarrow=True, arrowhead=1)

        st.plotly_chart(fig)

def Correlacao():
    # Matriz de correla√ß√£o e heatmap
    st.markdown("#### Matriz de Correla√ß√£o das Vari√°veis")
    corr_matrix = base[cols_to_normalize].corr()
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5, ax=ax)
    st.pyplot(fig)

def Tend_Sazo():
    # Decomposi√ß√£o sazonal
    st.markdown("#### üìä An√°lise Temporal: Tend√™ncias e Sazonalidade")
    result = seasonal_decompose(base['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares'], model='multiplicative', period=365)
    fig, axes = plt.subplots(3, 1, figsize=(10, 10))
    result.trend.plot(ax=axes[0], title="Tend√™ncia")
    result.seasonal.plot(ax=axes[1], title="Sazonalidade")
    result.resid.plot(ax=axes[2], title="Res√≠duos")
    st.pyplot(fig)


#Menu tabs 
tabs = st.tabs (['Pre√ßo', 'Varia√ß√µes', 'Correlacao', 'Tend√™ncias e Sazonalidade'])

# Aba "Pre√ßo"
with tabs[0]: 
    Estatistica_descritiva()
# Aba "Varia√ß√µes"
with tabs[1]: 
    Grafico_Var_Event_Hist()
# Aba "Correlacao"
with tabs[2]: 
    Correlacao()
# Aba "Tend√™ncias e Sazonalidade"
with tabs[3]: 
    Tend_Sazo()