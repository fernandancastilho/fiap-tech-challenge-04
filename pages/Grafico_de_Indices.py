import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

# ---- T√çTULO E INTRODU√á√ÉO ----
st.title("An√°lise da Varia√ß√£o Relativa do Petr√≥leo e Outros √çndices üìàüõ¢Ô∏è")
st.markdown("""
Este aplicativo analisa a rela√ß√£o entre o pre√ßo do petr√≥leo Brent e vari√°veis econ√¥micas globais, 
como o **S&P 500**, **Ouro (Gold)**, **√çndice DXY** e **TASI**.  
""")

# ---- FUN√á√ÉO PARA OBTER DADOS ----
@st.cache_data
def get_data():
    # Baixar os dados do petr√≥leo
    df = yf.Ticker("BZ=F").history(period="max", interval="1d").reset_index()
    df['Date'] = df['Date'].dt.tz_localize(None)
    df.rename(columns={'Close': 'Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares'}, inplace=True)
    df = df[['Date', 'Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares']]

    # Baixar os dados do S&P 500
    sp500 = yf.Ticker("^GSPC").history(period="max", interval="1d").reset_index()
    sp500['Date'] = sp500['Date'].dt.tz_localize(None)

    # Baixar os dados do ouro
    gold = yf.Ticker("IAU").history(period="max", interval="1d").reset_index()
    gold['Date'] = gold['Date'].dt.tz_localize(None)

    # Baixar o √çndice DXY
    dxy = yf.Ticker("DX-Y.NYB").history(period="max", interval="1d").reset_index()
    dxy['Date'] = dxy['Date'].dt.tz_localize(None)

    # Baixar os dados do TASI
    tasi = pd.read_csv(
        'https://raw.githubusercontent.com/ntfcamargo/Base-TECH-CHALLENGE-3/refs/heads/main/Dados%20Hist%C3%B3ricos%20-%20Tadawul%20All%20Share.csv',
        sep=','
    )
    tasi.rename(columns={'Data': 'Date'}, inplace=True)
    tasi['Date'] = pd.to_datetime(tasi['Date'])
    tasi['√öltimo'] = tasi['√öltimo'].str.replace('.', '', regex=False).str.replace(',', '.', regex=False).astype(float)

    # Mesclar os dados
    base = df.merge(sp500[['Date', 'Close']], on='Date', how='left').fillna(method='ffill')
    base.rename(columns={'Close': 'S&P500'}, inplace=True)

    base = base.merge(gold[['Date', 'Close']], on='Date', how='left').fillna(method='ffill')
    base.rename(columns={'Close': 'Gold'}, inplace=True)

    base = base.merge(dxy[['Date', 'Close']], on='Date', how='left').fillna(method='ffill')
    base.rename(columns={'Close': '√çndice DXY'}, inplace=True)

    base['Retorno Di√°rio Petr√≥leo'] = base['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares'].pct_change().fillna(0)

    basef = base[base['Date'] > '2005-12-31'].merge(tasi[['Date', '√öltimo']], on='Date', how='left').fillna(method='ffill')
    basef.rename(columns={'√öltimo': 'TASI'}, inplace=True)

    return basef

# ---- OBTENDO OS DADOS ----
basef = get_data()

# ---- DESCRI√á√ÉO DAS VARI√ÅVEIS ----
st.header("üìä Descri√ß√£o das Vari√°veis")
st.write("Abaixo est√° uma explica√ß√£o sobre cada uma das vari√°veis e sua rela√ß√£o com o pre√ßo do petr√≥leo:")

st.subheader("üõ¢Ô∏è Pre√ßo do Petr√≥leo Brent")
st.write("""
- **Descri√ß√£o**: Representa o pre√ßo di√°rio do barril de petr√≥leo Brent, refer√™ncia global.  
- **Rela√ß√£o**: Afetado por oferta, demanda, geopol√≠tica e fatores macroecon√¥micos.
""")

st.subheader("üìà S&P 500")
st.write("""
- **Descri√ß√£o**: √çndice das 500 maiores empresas americanas.  
- **Rela√ß√£o**: Quando a economia cresce, a demanda por petr√≥leo aumenta, elevando os pre√ßos.
""")

st.subheader("ü™ô Ouro (Gold)")
st.write("""
- **Descri√ß√£o**: Metal precioso usado como prote√ß√£o contra incertezas econ√¥micas.  
- **Rela√ß√£o**: Em crises, investidores migram para o ouro, reduzindo o pre√ßo do petr√≥leo (correla√ß√£o negativa).
""")

st.subheader("üíµ √çndice DXY")
st.write("""
- **Descri√ß√£o**: Mede a for√ßa do d√≥lar em rela√ß√£o a outras moedas globais.  
- **Rela√ß√£o**: Um d√≥lar mais forte torna o petr√≥leo mais caro para outros pa√≠ses, reduzindo a demanda.
""")

st.subheader("üá∏üá¶ TASI (√çndice da Ar√°bia Saudita)")
st.write("""
- **Descri√ß√£o**: Principal √≠ndice da bolsa da Ar√°bia Saudita.  
- **Rela√ß√£o**: Pode indicar mudan√ßas na pol√≠tica da OPEP, afetando o pre√ßo do petr√≥leo.
""")

# ---- NORMALIZA√á√ÉO DOS DADOS ----
cols_to_normalize = ['Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares', 'S&P500', 'Gold', '√çndice DXY', 'TASI']
df_normalized = basef.copy()
df_normalized[cols_to_normalize] = basef[cols_to_normalize].apply(lambda x: x / x.iloc[0])

# ---- CRIA√á√ÉO DO GR√ÅFICO ----
st.header("üìâ Varia√ß√£o Relativa das Vari√°veis")
fig, ax = plt.subplots(figsize=(14, 8))
for col in cols_to_normalize:
    if col == 'Pre√ßo - petr√≥leo bruto (Brent) - em d√≥lares':
        ax.plot(df_normalized['Date'], df_normalized[col], label=col, linewidth=2.5, color='red')
    else:
        ax.plot(df_normalized['Date'], df_normalized[col], label=col, linewidth=1.5, alpha=0.7)

ax.set_title("Varia√ß√£o Relativa das Vari√°veis ao Longo do Tempo", fontsize=16)
ax.set_xlabel("Ano", fontsize=14)
ax.set_ylabel("Varia√ß√£o Relativa (Base 1.0)", fontsize=14)
ax.legend(loc="upper left", fontsize=10)
ax.grid(alpha=0.3)

# Exibir o gr√°fico no Streamlit
st.pyplot(fig)

# ---- CHECKBOX PARA EXIBIR DADOS ----
if st.checkbox("üìã Exibir tabela de dados"):
    st.write(basef)
